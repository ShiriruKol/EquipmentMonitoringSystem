@using EquipmentMonitoringSystem.PresentationLayer.Models;
@model MaintenacesCompleteModel
@{
    ViewData["Title"] = "Список выполненных ТО";
}

<h5>Список выполненных тех. обслуживаний</h5>
<form asp-controller="Maintenance" asp-action="CompleteMaintenances">
    <div class="container">
        <div class="row">
            <div class="col">Выберите станцию</div>
            <div class="col">Выберите группу</div>
            <div class="col"></div>
        </div>
        <div class="row">
            <div class="col">
                <select id="SelectedStationId" asp-for="StationId" asp-items="Model.Stations" class="form-select">
                    <option selected disabled>Выберите станцию</option>
                </select>
            </div>
            <div class="col">
                <select id="SelectedGroupId" asp-for="GroupId" asp-items="Model.Groups" class="form-select"></select>
            </div>
            <div class="col">
                <button class="btn btn-success">Поиск</button>
            </div>
        </div>
    </div>
</form>

<script type="text/javascript">
    $(document).ready(function () {

        $("#SelectedStationId").change(function () {

            var select = document.getElementById("SelectedStationId");
            var value = select.value;

            $.ajax({
                type: "POST",
                url: "/Equipment/GroupSelect",
                data: { 'stid': value },
                contextType: "application/json; charset=utf-8",
                dataType: "json",
                success: OnSuccessResult,
                error: OnError
            });

            function OnSuccessResult(data) {
                var _data = data;
                var idgrs = _data[0];
                var namegrs = _data[1];

                var selectgr = document.getElementById("SelectedGroupId");
                $('#SelectedGroupId').find('option').remove(); //удаление старых данных
                for (var i = 0; i < idgrs.length; i++) {
                    // 1)
                    let selectedOption = selectgr.options[selectgr.selectedIndex];

                    // 2)
                    let newOption = new Option(namegrs[i], idgrs[i]);
                    selectgr.append(newOption);

                    // 3)
                    newOption.selected = true;
                }
            }

            function OnError(err) {
                alert("Произошла ошибка!!!")
            }
            return false;
        });
    });
</script>

@if (Model.UpcomingMaintenances != null)
{

    <div class="container">
        <main role="main" class="pb-3">
            <div class="action-area">
            </div>

            <input class="form-control mt-1" type="text" placeholder="Поиск по таблице" id="search-text" onkeyup="tableSearch()">
            <p><button class="btn btn-success mt-1" onclick="sortTable()">Отсортировать таблицу по алфавиту</button></p>

            <table class="table table-bordered" id="info-table">
                <thead>
                    <tr>
                        <th scope="col">Имя оборудования</th>
                        <th scope="col">Имя ТО</th>
                        <th scope="col">Дата проведения</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        foreach (var item in Model.UpcomingMaintenances)
                        {
                            <tr>
                                <td>@item.NameEquip</td>
                                <td>@item.NameMain</td>
                                <td>@item.Date</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </main>
    </div>
}


<script>
    function tableSearch() {
        var phrase = document.getElementById('search-text');
        var table = document.getElementById('info-table');
        var regPhrase = new RegExp(phrase.value, 'i');
        var flag = false;
        for (var i = 1; i < table.rows.length; i++) {
            flag = false;
            for (var j = table.rows[i].cells.length - 1; j >= 0; j--) {
                flag = regPhrase.test(table.rows[i].cells[j].innerHTML);
                if (flag) break;
            }
            if (flag) {
                table.rows[i].style.display = "";
            } else {
                table.rows[i].style.display = "none";
            }

        }
    }
</script>

<script>
    function sortTable() {
        var table, rows, switching, i, x, y, shouldSwitch;
        table = document.getElementById("info-table");
        switching = true;
        /*Make a loop that will continue until
        no switching has been done:*/
        while (switching) {
            //start by saying: no switching is done:
            switching = false;
            rows = table.getElementsByTagName("TR");
            /*Loop through all table rows (except the
            first, which contains table headers):*/
            for (i = 1; i < (rows.length - 1); i++) {
                //start by saying there should be no switching:
                shouldSwitch = false;
                /*Get the two elements you want to compare,
                one from current row and one from the next:*/
                x = rows[i].getElementsByTagName("TD")[0];
                y = rows[i + 1].getElementsByTagName("TD")[0];
                //check if the two rows should switch place:
                if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                    //if so, mark as a switch and break the loop:
                    shouldSwitch = true;
                    break;
                }
            }
            if (shouldSwitch) {
                /*If a switch has been marked, make the switch
                and mark that a switch has been done:*/
                rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                switching = true;
            }
        }
    }
</script>